var RPV = artifacts.require("ZkSensors");

// Note: byte arrays representing big numbers should be multiples of 32 bytes
var NUMBER_1 = "0xa0e1e8856e7d8f37a7463b17c21d4b163165407377b6e472de799becdc7a5c2f"
var NUMBER_2 = "0xd69447ef717b0f977c058320609dc13a3625c1bc3aa48a483ba24d26dd1279e1"
var BIG_NUMBER_1 = "0xa9c540f74dead3ab3e63ebb7370168f4bcd4cd0f6d935492ae034fc49a428eb87bb1dc0521015787e650eb9415d19a8055cf4aa94f57d164aaab0825c97ac4b6fb7b1ba0b91264636d75406c794f9e966736cc5aba2911eef58867236ff08af2"
var BIG_NUMBER_2 = "0xdc8315d2d2d6caffcb34c4d0dfb8b2a14356f9b3a069baa5735d295b7431f3744e70f808857d83da88885cf15dd2d5fc1e2d86e3ec1c1c5bd571c662d9e041351efc6aed3b9aa91da8febe1ddf5211dd5ba91ef42d89e6ef31c8ecfa9d1185f8"
var BIG_NUMBER_3 = "0xa978cf64315b2b83390c06ba4f3c99635481bccf4a58d7c4675ba7a7c4fa636d2131239859f6c85c4b83b0018c907fb6636012be71ccb6a08cd34a93ffe33dccfd88c79d038273800dafd271a1aa41c3dc79b01777b4f6f7cd55f2ad9d9d3757"
var SMALL_NUMBER_1 = "0x00000000000000000000000000000000000000000000000000000026dd1279e1"


function modify(str, pos) {
    var newChar = str.charAt(pos) == "0" ? "1" : "0"
    return str.substr(0, pos) + newChar + str.substr(pos + 1);
}


contract('RangeProofValidator', function(accounts) {
  let rpv;
    beforeEach('Setup contract for each test', async function () {
      rpv = await RPV.new();
    });
  // it("should validate a correct proof",async function () {
  //   var instance;
  //   const commitment = "0x00000000000000000000000000000000000000000000000000000000000000E0000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001E0000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002E0000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000003E005A7479F3C0227BBEFC2E3192838FE3300B1CC4356384837FF05AEF9ADD35E015D9C303215196ADF90A5A7AFCCF7B2DF5E49FED04B4004FEC3975ECAF663D9D765FE9273E9380DFCEABF3E333C629291E4BEA7611C240486888D53E070797A9AF06AF406DA1171AD68F36B5787321F5939F4EA172CCC536477BD3FBE308001F627ABC941A6A55D90D4CC887C48A3858E0C2B4FF9134C82860D112C46FD9DDF342C1A82A611345E2AB46EC2AAEBE838DD40AC52270519127421984E8B4E01AAFB12C3D9C40B4084E943FEC2617AE0C09AF8F60749BE7EB3066964B526A715CE1405069CEFE2AF375BD9AE75C72009A8536885903F25ABA04D73BF8D745DB4EEB106747D8064AB68277396CB5162E766B3C5D2F0DD8576D99DEB4A9A4B6CF075FEFCD4C50B7A940CBBB59AA1172624F3EE76B3FA56CECFA831F0A5FD95A5B85F5ABBD3C2E0278609F7BC13219AE81B93C7DBB48083068CEF40B1D2101B8F06FC47B8638127FEF17F8B3E2124AFD871BDC54314BE7348E8EDD7739FE56332A801AD05E61ED5B453731F0F10FF969D23230EA211D2C2A259BDAB76111CAC73621750F11C15734B33CC20410B41A51A18FE9F1229F1E692123B76049B4429F8FF2B5EB6E091E5835C79007FBCF5C0AB8411AAC52116B3C94E3965CD45B69E2DDA72A8C92F57C63366EEC51EBFD777748D8474894DBBBC215FD71D9CEDD0D80DD5CA1A23274C1564E6F14A28117D3B83F72A72C34403D40E515E8E775CC40ADE4FFFD5614B5318FF6F7D8A4AD5C6723CD6B5EC0DCB3D0498906AE25224301BABE64150C067FFDAA5947551AB0B5DBB4C030BFA2B7E9C2B692994DDF23462C53DB6AABB1409A3D8F2C3A4FC5AF541D16315FF91D7FB1F76AC78B02ABE758C72F01C9C3E2775CE018455174D66C213D70A2C9DE51EFD6E43096F90D7C2B99A7C176DF521041545D630382702097B40C9D322848564E8FB47E3A1F08053ECEDF3663AAD5E515881479829DE668C03A51CD163FB2331289354051D052A72A55BC97C78516463FB373EC7FF89E1FC101A22C7648BEB22ED1B3FFD2972FA10241CA2EE252A130DC7F293166D1B64DA7F038157EEE81F814BCFE8EA2A696C3CFD3B8CD76A1C011C4CE52AE071A6481133D03BF06AC58C39B730D73BB926B655A4370BDE72505D9F26434A52AA99521EB4A0B43B678094D8BA2EFF8F5ABE228C0164AD8C5473B6CB812FC2603DDE21E0ED1FEB9B39E72D09FD1D7E77B0F19A7EB233CB420B353D"
  //   const proof = ""
  //   const lower = 18
  //   const upper = 65
  //   console.log('Contract Deployed at: ',rpv.address);
  //   var res = await rpv.validate.call(lower, upper, commitment, proof);
  //   assert.equal(res, true)
  // })

  // it("should reject a modified proof", async function () {
  //   var instance;
  //   var commitment = "0x00000000000000000000000000000000000000000000000000000000000000E0000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001E0000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002E0000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000003E005A7479F3C0227BBEFC2E3192838FE3300B1CC4356384837FF05AEF9ADD35E015D9C303215196ADF90A5A7AFCCF7B2DF5E49FED04B4004FEC3975ECAF663D9D765FE9273E9380DFCEABF3E333C629291E4BEA7611C240486888D53E070797A9AF06AF406DA1171AD68F36B5787321F5939F4EA172CCC536477BD3FBE308001F627ABC941A6A55D90D4CC887C48A3858E0C2B4FF9134C82860D112C46FD9DDF342C1A82A611345E2AB46EC2AAEBE838DD40AC52270519127421984E8B4E01AAFB12C3D9C40B4084E943FEC2617AE0C09AF8F60749BE7EB3066964B526A715CE1405069CEFE2AF375BD9AE75C72009A8536885903F25ABA04D73BF8D745DB4EEB106747D8064AB68277396CB5162E766B3C5D2F0DD8576D99DEB4A9A4B6CF075FEFCD4C50B7A940CBBB59AA1172624F3EE76B3FA56CECFA831F0A5FD95A5B85F5ABBD3C2E0278609F7BC13219AE81B93C7DBB48083068CEF40B1D2101B8F06FC47B8638127FEF17F8B3E2124AFD871BDC54314BE7348E8EDD7739FE56332A801AD05E61ED5B453731F0F10FF969D23230EA211D2C2A259BDAB76111CAC73621750F11C15734B33CC20410B41A51A18FE9F1229F1E692123B76049B4429F8FF2B5EB6E091E5835C79007FBCF5C0AB8411AAC52116B3C94E3965CD45B69E2DDA72A8C92F57C63366EEC51EBFD777748D8474894DBBBC215FD71D9CEDD0D80DD5CA1A23274C1564E6F14A28117D3B83F72A72C34403D40E515E8E775CC40ADE4FFFD5614B5318FF6F7D8A4AD5C6723CD6B5EC0DCB3D0498906AE25224301BABE64150C067FFDAA5947551AB0B5DBB4C030BFA2B7E9C2B692994DDF23462C53DB6AABB1409A3D8F2C3A4FC5AF541D16315FF91D7FB1F76AC78B02ABE758C72F01C9C3E2775CE018455174D66C213D70A2C9DE51EFD6E43096F90D7C2B99A7C176DF521041545D630382702097B40C9D322848564E8FB47E3A1F08053ECEDF3663AAD5E515881479829DE668C03A51CD163FB2331289354051D052A72A55BC97C78516463FB373EC7FF89E1FC101A22C7648BEB22ED1B3FFD2972FA10241CA2EE252A130DC7F293166D1B64DA7F038157EEE81F814BCFE8EA2A696C3CFD3B8CD76A1C011C4CE52AE071A6481133D03BF06AC58C39B730D73BB926B655A4370BDE72505D9F26434A52AA99521EB4A0B43B678094D8BA2EFF8F5ABE228C0164AD8C5473B6CB812FC2603DDE21E0ED1FEB9B39E72D09FD1D7E77B0F19A7EB233CB420B353D"
  //   var proof = ""
  //   const lower = 18
  //   const upper = 65
  //   var result = await rpv.validate.call(lower, upper, commitment, modify(proof, 1489))
  //   assert.equal(result, false)
  //   // result = await rpv.validate.call(lower, upper, commitment, modify(proof, 3792))
  //   // assert.equal(result, false)
  //   // result = await rpv.validate.call(lower, upper, commitment, modify(proof, 6284))
  //   // assert.equal(result, false)
  //   // result = await rpv.validate.call(lower, upper, commitment, modify(proof, 8274))
  //   // assert.equal(result, false)
  // })

  // it("should convert uint256 to bytes",async function() {
  //   var result = await rpv.toBigInt.call(1);
  //   assert.equal(result, "0x0000000000000000000000000000000000000000000000000000000000000001");
  //   result = await rpv.toBigInt.call(web3.utils.toBN(NUMBER_1))
  //   assert.equal(result, NUMBER_1);
  // });
  //   it("Test basic operations", async function () {
  //       let result = await rpv.bigadd.call(NUMBER_1, NUMBER_2)
  //       let expectedResult = web3.utils.toBN(NUMBER_1) + web3.utils.toBN(NUMBER_2)
  //       assert.equal(await web3.utils.toBN(result), expectedResult, "bigadd should work")
  //       result = await rpv.bigsub.call(BIG_NUMBER_1, BIG_NUMBER_2)
  //       expectedResult = web3.utils.toBN(BIG_NUMBER_1) - web3.utils.toBN(BIG_NUMBER_2).abs()
  //       assert.equal(web3.utils.toBN(result), expectedResult)
  //       result = await rpv.multiply.call(SMALL_NUMBER_1, BIG_NUMBER_3)
  //       expectedResult = web3.utils.toBN(SMALL_NUMBER_1) * (web3.utils.toBN(BIG_NUMBER_3))
  //       assert.equal(web3.utils.toBN(result), expectedResult)
  //       result = await rpv.bmod.call(BIG_NUMBER_3, SMALL_NUMBER_1)
  //       expectedResult = web3.utils.toBN(BIG_NUMBER_3) % (web3.utils.toBN(SMALL_NUMBER_1))
  //       assert.equal(web3.utils.toBN(result), expectedResult)
  // });

  // it("should calculate square of big number", async function () {
  //   var result = await rpv.square.call(NUMBER_1)
  //   let expectedResult = web3.utils.toBN(NUMBER_1) * (web3.utils.toBN(NUMBER_1))
  //   console.log(await web3.utils.toBN(result))
  //   assert.equal(await web3.utils.toBN(result), expectedResult, "rpv square should work")
  //   result = await rpv.square.call(BIG_NUMBER_1)
  //   expectedResult = web3.utils.toBN(BIG_NUMBER_1) * (web3.utils.toBN(BIG_NUMBER_1))
  //   assert.equal(await web3.utils.toBN(result), expectedResult, "rpv square on bn should work")
  // });
  // it("should correctly shift left or right", async function () {
  //   var result = await rpv.shiftLeft.call(BIG_NUMBER_1, 40)
  //   let expectedResult = web3.utils.toBN(BIG_NUMBER_1) * (web3.utils.toBN(2)^(40))
  //     assert.equal(await web3.utils.toBN(result), expectedResult)
  //   result = await rpv.shiftLeft.call(BIG_NUMBER_1, 300)
  //     expectedResult = web3.utils.toBN(BIG_NUMBER_1).mul(web3.utils.toBN(2).pow(300))
  //     assert.equal(web3.utils.toBN(result), expectedResult)
  //     result = await rpv.shiftLeft.call(BIG_NUMBER_1, -40)
  //     expectedResult = web3.utils.toBN(BIG_NUMBER_1).divToInt(web3.utils.toBN(2).pow(40))
  //     assert.equal(web3.utils.toBN(result), expectedResult)
  //     result = rpv.shiftLeft.call(BIG_NUMBER_1, -300)
  //     expectedResult = web3.utils.toBN(BIG_NUMBER_1).divToInt(web3.utils.toBN(2).pow(300))
  //     assert.equal(web3.utils.toBN(result), expectedResult)
  //     result = await rpv.shiftLeft.call(BIG_NUMBER_1, - (BIG_NUMBER_1).length * 4)
  //     assert.equal(result, "0x")
  // });

  it("test zksensors", async function () {
    await rpv.sensorReport(NUMBER_1,1,2,3,4,5,6);
    assert(await rpv.getNumberOfReportsById(NUMBER_1) == 1, "one record should be recorded");
    let vars = await rpv.getAllIds();
    assert(vars[0] == NUMBER_1, "all ids should return correct");
    vars = await rpv.getDetailsByIdAndIndex(NUMBER_1,0);
        console.log(vars['1'] )
    console.log(vars);
    assert(vars['0'] == 1,"timestamp1 should be correct");
    assert(vars['1'] == 2 , "timestamp2 should be correct");
    assert(vars['2'] == 3, "Orientation1 should be correct");
    assert(vars['3'] == 4, "Orientation 2 should be correct");
        assert(vars['4'] == 5, "key1 should be correct");
    assert(vars['5'] == 6, "key2 should be correct");
    assert(await rpv.getSensorIdsLength() == 1);
    await rpv.sensorReport(NUMBER_1,1,2,3,5,6,7);
    assert(await rpv.getSensorIdsLength() == 1);
  });
  it("test store proof zksensors", async function () {
    await rpv.sensorReport(NUMBER_1,1,2,3,4,5,6);
    var proof = "0x0000000000000000000000000000000000000000000000000000000000000001";
    await rpv.storeProof(NUMBER_1,proof);
    assert(await rpv.getZkProof(NUMBER_1) == proof);

  });



});